---
- name: Add the Iceweasel repository
  apt_repository: repo='deb http://mozilla.debian.net/ wheezy-backports iceweasel-release' state=present
- name: Install Mozilla Debian GPG key package
  apt: pkg=pkg-mozilla-archive-keyring state=installed update_cache=true
- name: Install Mozilla GPG key
  command: gpg --check-sigs --fingerprint --keyring /etc/apt/trusted.gpg.d/pkg-mozilla-archive-keyring.gpg --keyring /usr/share/keyrings/debian-keyring.gpg pkg-mozilla-maintainers
  ignore_errors: True
- name: Install Iceweasel
  apt: pkg=iceweasel state=installed update_cache=true
- name: Install VNC server
  apt: pkg=tightvncserver state=installed update_cache=true
- name: Install Fluxbox
  apt: pkg=fluxbox state=installed update_cache=true
- name: Install xbase-clients
  apt: pkg=xbase-clients state=installed update_cache=true
- name: Install Java (OpenJDK)
  apt: pkg=openjdk-7-jre state=installed
- name: Install unzip
  apt: pkg=unzip state=installed
- name: Install zip
  apt: pkg=zip state=installed
- name: Install Chromium
  apt: pkg=chromium state=installed
- name: Install Curl
  apt: pkg=curl state=installed


- copy: src=locale.sh dest=/etc/profile.d/locale.sh mode=775
- name: Install locales
  apt: pkg=locales state=installed
  environment: "{{ locale_env }}"
- lineinfile: dest=/etc/locale.gen state=present regexp='^en_GB.UTF-8 UTF_8' line='en_GB.UTF-8 UTF-8'
- lineinfile: dest=/etc/locale.gen state=absent regexp='^# en_GB.UTF-8 UTF-8'
- name: Configure locales
  command: dpkg-reconfigure locales
  environment: "{{ locale_env }}"


- name: Install vim-nox
  apt: pkg=vim-nox state=installed
- name: Configure vim as default editor
  command: update-alternatives --set editor /usr/bin/vim.nox 


- name: Install ntp
  apt: pkg=ntp state=installed
- name: Install ntpdate
  apt: pkg=ntpdate state=installed
- name: Stop NTP service. Need to do this before you attempt one-time ntpdate use
  service: name=ntp state=stopped
- name: One-time setting of date and time via ntpdate
  command: ntpdate ntp.zhdk.ch
- name: Set up ntp
  copy: src=ntp.conf dest=/etc/ntp.conf
- name: Run NTP service
  service: name=ntp state=started


- name: Create jenkins user
  user: name=jenkins shell=/bin/bash state=present

# Need to improve below by storing those keys somewhere central.
- name: Install root SSH keys
  authorized_key: user=root key={{ item }} state=present
  with_file:
    - ../../../files/ssh_keys/rca.pub
    - ../../../files/ssh_keys/thomas.pub
    - ../../../files/ssh_keys/franco.pub
    - ../../../files/ssh_keys/sebastian.pub
- name: Install jenkins SSH keys
  authorized_key: user=jenkins key={{ item }} state=present
  with_file:
    - ../../../files/ssh_keys/rca.pub
    - ../../../files/ssh_keys/thomas.pub
    - ../../../files/ssh_keys/franco.pub
    - ../../../files/ssh_keys/sebastian.pub
    - ../../../files/ssh_keys/matus.pub

- name: Make sure no chromedriver is in /tmp
  file: path=/tmp/chromedriver state=absent
- name: Download chromedriver
  shell: curl https://chromedriver.googlecode.com/files/chromedriver_linux{{  ansible_userspace_bits  }}_26.0.1383.0.zip > chromedriver.zip chdir=/tmp
- name: Unzip chromedriver
  command: unzip chromedriver.zip chdir=/tmp
- name: Stick chromedriver somewhere in the PATH
  command: mv chromedriver /usr/local/bin chdir=/tmp
- name: Change mode of chromedriver to be executable
  file: path=/usr/local/bin/chromedriver mode=755


- name: Download PhantomJS
  shell: curl https://phantomjs.googlecode.com/files/phantomjs-1.9.0-linux-{{ ansible_machine }}.tar.bz2 | tar xj chdir=/tmp
- name: Stick PhantomJS somewhere in the PATH
  command: cp phantomjs-1.9.0-linux-{{ ansible_machine }}/bin/phantomjs /usr/local/bin/ chdir=/tmp
- name: Change mode of PhantomJS to be executable
  file: path=/usr/local/bin/phantomjs mode=755


- name: Install PostgreSQL
  apt: pkg={{ item }} state=present
  with_items:
    - postgresql
    - postgresql-client
    - libpq-dev
    - postgresql-contrib
    - python-psycopg2
- name: Create jenkins PostgreSQL user
  postgresql_user: name=jenkins password=jenkins
  sudo: True
  sudo_user: postgres
- name: Give jenkins a PostgreSQL database
  postgresql_db: name=jenkins owner=jenkins state=present
  sudo: True
  sudo_user: postgres
- name: Switch of PostgreSQL security
  copy: src=pg_hba_no_security.conf dest=/etc/postgresql/9.1/main/pg_hba.conf
  notify:
    - restart postgresql


- name: Install packages for rbenv
  apt: pkg={{ item }} state=present
  with_items:
    - git
    - libreadline-dev
    - libreadline6-dev
    - libssl-dev
    - libxslt1-dev
    - libxml2-dev
    - build-essential
    - zlib1g-dev
- name: Check if rbenv is installed
  command: ls {{ rbenv_root }} 
  register: rbenv_is_installed
  ignore_errors: True
- name: Install rbenv globally
  git: repo=https://github.com/sstephenson/rbenv.git dest={{ rbenv_root }}
  when: rbenv_is_installed|failed
- name: Install ruby-build so you can install Rubies through rbenv
  git: repo=https://github.com/sstephenson/ruby-build.git dest={{ rbenv_root }}/plugins/ruby-build
  when: rbenv_is_installed|failed
- name: Install rbenv profile snippet
  template: src=rbenv.sh.j2 dest=/etc/profile.d/rbenv.sh
  when: rbenv_is_installed|failed
- name: Check if Ruby is installed
  command: bash -l -c 'ruby -v' 
  register: ruby_is_installed
  ignore_errors: True
- name: Install rbenv Ruby
  command: executable=/bin/bash bash -l -c 'rbenv install 1.9.3-p448'
  when: rbenv_is_installed|success and ruby_is_installed|failed
  register: ruby_has_been_installed
- name: Set default Ruby 
  command: executable=/bin/bash bash -l -c 'rbenv global 1.9.3-p448'
  when: rbenv_is_installed|success or ruby_has_been_installed|success
